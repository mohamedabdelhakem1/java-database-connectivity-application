package eg.edu.alexu.csd.oop.jdbc.cs43;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MyStatement implements Statement {
	// columns are one based
	private List<String> batches;
	private Connection connection;
	private SingleDatabaseEngine engine;
	private int timeout = 0;
	private String path;

	public MyStatement(Connection connection, String path) {
		engine = new SingleDatabaseEngine(path);
		this.connection = connection;
		batches = new LinkedList<>(); // list of sql commands to be executed
		this.path = path;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		batches.add(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		batches.clear();
	}

	@Override
	public void close() throws SQLException {

		connection = null;
		engine.closeEngine();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		Object object = engine.execute(sql);
		if (object instanceof Boolean) {
			return (Boolean) object;
		} else if (object instanceof Integer) {
			if ((Integer) object > 0) {
				return true;
			} else {
				return false;
			}
		} else if (object instanceof Object[][]) {
			if (object == null || ((Object[][]) object).length > 0) {
				return true;
			}
			return false;
		}

		return false;

	}

	@Override
	public int[] executeBatch() throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		int[] RowsAffected = new int[batches.size()];
		for (int i = 0; i < RowsAffected.length; i++) {
			String sql = batches.get(i);
			Object object;
			try {
				object = engine.execute(sql);
				if (object instanceof Integer) {
					RowsAffected[i] = Integer.valueOf(String.valueOf(object));
				} else {
					RowsAffected[i] = SUCCESS_NO_INFO;
				}
			} catch (Exception e) {
				RowsAffected[i] = EXECUTE_FAILED;
			}
			

		}
		return RowsAffected;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		Object[][] result = engine.executeQuery(sql);
		Map<String, Object> map = engine.getCurrentTableMetaData();
		String[] columns = (String[]) map.get("columns");
		String[] types = (String[]) map.get("types");
		ResultSetMetaData data = new MyResultSetMetaData((String) map.get("tablename"), types, columns);

		ResultSet resultSet = new MyResultset(data, result, columns, this);
		return resultSet;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		return engine.executeUpdateQuery(sql);
	}

	@Override
	public Connection getConnection() throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		return connection;
	}

	public int getQueryTimeout() throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		// TODO Auto-generated method stub
		return timeout;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		if (connection == null) {
			throw new SQLException();
		}
		timeout = seconds;

	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getFetchSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxRows() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isClosed() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();
	}

}
